name: Deploy to ECS

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Pushing Docker image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      run: |
        # Create a new task definition file with the updated image URI
        # Note that we are using the build sha as the image tag
        sed "s|\"image\": \"[^\"]*\"|\"image\": \"${{ steps.build-image.outputs.image }}\"|g" .aws/task-definition.json > .aws/task-definition-new.json
        echo "task-definition=.aws/task-definition-new.json" >> $GITHUB_OUTPUT

    - name: Deploy Amazon ECS task definition
      id: deploy-ecs
      run: |
        # Register the new task definition
        TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://${{ steps.task-def.outputs.task-definition }} --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "task-definition-arn=$TASK_DEFINITION_ARN" >> $GITHUB_OUTPUT

        # Update the service with the new task definition
        aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_SERVICE }} --task-definition $TASK_DEFINITION_ARN --force-new-deployment

        # Wait for the service to stabilize
        echo "Waiting for deployment to stabilize..."
        aws ecs wait services-stable --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }}

    - name: Get deployment details
      id: deployment-info
      run: |
        # Get service details
        TASK_DEFINITION_ARN=$(aws ecs describe-services \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --services ${{ secrets.ECS_SERVICE }} \
          --query 'services[0].taskDefinition' \
          --output text)
        
        echo "task-definition-arn=$TASK_DEFINITION_ARN" >> $GITHUB_OUTPUT
        
        # Try to get load balancer URL
        LB_URL=$(aws elbv2 describe-load-balancers \
          --query 'LoadBalancers[?contains(LoadBalancerName, `trendsearth`) == `true`].DNSName' \
          --output text 2>/dev/null || echo "")
        
        # Fallback to service URL secret if available
        if [ -z "$LB_URL" ]; then
          LB_URL="${{ secrets.ECS_SERVICE_URL }}"
        fi
        
        echo "lb-url=$LB_URL" >> $GITHUB_OUTPUT

    - name: Verify deployment
      run: |
        # Wait for deployment to stabilize
        echo "Waiting for deployment to stabilize..."
        sleep 45
        
        # Check service status
        RUNNING_COUNT=$(aws ecs describe-services \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --services ${{ secrets.ECS_SERVICE }} \
          --query 'services[0].runningCount' \
          --output text)
        
        DESIRED_COUNT=$(aws ecs describe-services \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --services ${{ secrets.ECS_SERVICE }} \
          --query 'services[0].desiredCount' \
          --output text)
        
        echo "Service status: $RUNNING_COUNT/$DESIRED_COUNT tasks running"
        
        if [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ] && [ "$RUNNING_COUNT" -gt 0 ]; then
          echo "‚úÖ ECS service is running with desired capacity"
        else
          echo "‚ùå ECS service is not running properly"
          exit 1
        fi
        
        # Health check if URL is available
        LB_URL="${{ steps.deployment-info.outputs.lb-url }}"
        if [ -n "$LB_URL" ]; then
          echo "Performing health check on $LB_URL"
          for i in {1..12}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "http://$LB_URL/api-ui-health" || echo "000")
            if [ "$response" = "200" ]; then
              echo "‚úÖ Health check passed (attempt $i)"
              echo "Application URL: http://$LB_URL"
              break
            else
              echo "‚è≥ Health check failed (attempt $i), retrying in 15 seconds..."
              if [ $i -eq 12 ]; then
                echo "‚ö†Ô∏è Health check failed after 12 attempts, but ECS service is running"
                echo "This may be due to load balancer configuration or health check endpoint"
              fi
              sleep 15
            fi
          done
        else
          echo "‚ö†Ô∏è No load balancer URL configured, skipping health check"
        fi

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "üéâ Deployment to ECS completed successfully!"
          echo "Container Image: ${{ steps.build-image.outputs.image }}"
          echo "ECS Cluster: ${{ secrets.ECS_CLUSTER }}"
          echo "ECS Service: ${{ secrets.ECS_SERVICE }}"
          echo "Task Definition: ${{ steps.deployment-info.outputs.task-definition-arn }}"
          
          LB_URL="${{ steps.deployment-info.outputs.lb-url }}"
          if [ -n "$LB_URL" ]; then
            echo "Application URL: http://$LB_URL"
          fi
          
          echo "Deployed commit: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Deployment time: $(date -u)"
        else
          echo "üí• ECS deployment failed!"
          echo "Check the logs above for details."
          echo "You may need to check ECS service logs in AWS Console."
          echo "Consider rolling back if necessary."
        fi
