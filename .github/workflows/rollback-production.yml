name: Rollback Production Deployment

on:
  workflow_dispatch:
    inputs:
      rollback_to_commit:
        description: 'Specific commit SHA to rollback to (optional, leave blank for automatic rollback)'
        required: false
        default: ''
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  ECR_REPOSITORY: trendsearth-api-ui
  CODEDEPLOY_APPLICATION: trendsearth-api-ui
  CODEDEPLOY_DEPLOYMENT_GROUP: production

jobs:
  rollback-production:
    name: Rollback Production Service
    runs-on: ubuntu-latest
    environment: production
    env:
      ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_ACCESS_TOKEN }}
      CODEDEPLOY_S3_BUCKET: ${{ secrets.CODEDEPLOY_S3_BUCKET }}
    
    steps:
    - name: Validate inputs and configuration
      run: |
        echo "🔍 Validating rollback configuration..."
        echo "Reason: ${{ github.event.inputs.reason }}"
        echo "Rollback to commit: ${{ github.event.inputs.rollback_to_commit || 'automatic rollback' }}"
        
        # Validate required secrets
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "❌ Error: AWS credentials not configured"
          exit 1
        fi
        
        if [ -z "$CODEDEPLOY_S3_BUCKET" ]; then
          echo "❌ Error: CODEDEPLOY_S3_BUCKET secret is not set"
          exit 1
        fi
        
        echo "✅ Configuration validated"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get current deployment status
      id: current-deployment
      run: |
        echo "📊 Getting current deployment status..."
        
        # Get the most recent deployment
        CURRENT_DEPLOYMENT=$(aws deploy list-deployments \
          --application-name ${{ env.CODEDEPLOY_APPLICATION }} \
          --deployment-group-name ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }} \
          --include-only-statuses Succeeded \
          --max-items 1 \
          --query 'deployments[0]' \
          --output text)
        
        if [ "$CURRENT_DEPLOYMENT" = "None" ]; then
          echo "❌ No successful deployments found"
          exit 1
        fi
        
        echo "current-deployment=$CURRENT_DEPLOYMENT" >> $GITHUB_OUTPUT
        echo "✅ Current deployment: $CURRENT_DEPLOYMENT"

    - name: Determine rollback strategy
      id: rollback-strategy
      run: |
        if [ -n "${{ github.event.inputs.rollback_to_commit }}" ]; then
          echo "🎯 Specific commit rollback requested"
          echo "strategy=commit" >> $GITHUB_OUTPUT
          echo "target-commit=${{ github.event.inputs.rollback_to_commit }}" >> $GITHUB_OUTPUT
        else
          echo "🔄 Automatic rollback requested"
          echo "strategy=automatic" >> $GITHUB_OUTPUT
        fi

    - name: Perform automatic rollback
      if: steps.rollback-strategy.outputs.strategy == 'automatic'
      run: |
        echo "🔄 Performing automatic rollback using CodeDeploy..."
        
        # Stop the last deployment if it's still running
        DEPLOYMENT_ID=${{ steps.current-deployment.outputs.current-deployment }}
        
        ROLLBACK_ID=$(aws deploy stop-deployment \
          --deployment-id $DEPLOYMENT_ID \
          --auto-rollback-enabled \
          --query 'deploymentId' \
          --output text || echo "")
        
        if [ -n "$ROLLBACK_ID" ]; then
          echo "✅ Automatic rollback initiated: $ROLLBACK_ID"
          
          # Wait for rollback to complete
          echo "⏳ Waiting for rollback to complete..."
          aws deploy wait deployment-successful --deployment-id $ROLLBACK_ID
          
          echo "✅ Automatic rollback completed successfully"
        else
          echo "⚠️ Could not initiate automatic rollback, will attempt service-level rollback"
          
          # Alternative: Rollback at the service level using Docker Swarm
          echo "🔄 Attempting Docker service rollback..."
          # Note: This would require SSH access which we're removing
          # For now, we'll just report the issue
          echo "❌ Service-level rollback requires manual intervention"
          exit 1
        fi

    - name: Perform commit-specific rollback
      if: steps.rollback-strategy.outputs.strategy == 'commit'
      run: |
        echo "🎯 Performing rollback to specific commit: ${{ steps.rollback-strategy.outputs.target-commit }}"
        
        # Checkout the specific commit
        git fetch --depth=50  # Get enough history to find the commit
        git checkout ${{ steps.rollback-strategy.outputs.target-commit }}
        
        # Check if ECR image exists for this commit
        aws ecr describe-images \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --image-ids imageTag=${{ steps.rollback-strategy.outputs.target-commit }} \
          --query 'imageDetails[0].imageTags' \
          --output text || {
          echo "❌ Error: ECR image not found for commit ${{ steps.rollback-strategy.outputs.target-commit }}"
          echo "Available tags:"
          aws ecr list-images --repository-name ${{ env.ECR_REPOSITORY }} --query 'imageIds[].imageTag' --output table
          exit 1
        }
        
        # Create deployment bundle for the target commit
        echo "📦 Creating rollback deployment bundle..."
        mkdir -p deploy-bundle
        cp appspec.yml deploy-bundle/
        cp -r scripts/ deploy-bundle/
        cp docker-compose.prod.yml deploy-bundle/
        cp docker-compose.staging.yml deploy-bundle/
        
        # Create deployment info file
        cat > deploy-bundle/deployment-info.json <<EOF
        {
          "deploymentId": "${{ steps.rollback-strategy.outputs.target-commit }}",
          "branch": "rollback",
          "image": "$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ steps.rollback-strategy.outputs.target-commit }}",
          "registry": "$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com",
          "environment": "production",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "rollback": true,
          "reason": "${{ github.event.inputs.reason }}"
        }
        EOF
        
        cd deploy-bundle
        zip -r ../rollback-bundle.zip .
        cd ..
        
        # Upload bundle to S3
        S3_KEY="deployments/trendsearth-api-ui/rollback/${{ steps.rollback-strategy.outputs.target-commit }}/rollback-bundle.zip"
        
        aws s3 cp rollback-bundle.zip "s3://$CODEDEPLOY_S3_BUCKET/$S3_KEY"
        
        # Create CodeDeploy deployment
        ROLLBACK_DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name ${{ env.CODEDEPLOY_APPLICATION }} \
          --deployment-group-name ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }} \
          --s3-location bucket=$CODEDEPLOY_S3_BUCKET,key=$S3_KEY,bundleType=zip \
          --description "ROLLBACK to commit ${{ steps.rollback-strategy.outputs.target-commit }}: ${{ github.event.inputs.reason }}" \
          --query 'deploymentId' \
          --output text)
        
        echo "✅ Rollback deployment created: $ROLLBACK_DEPLOYMENT_ID"
        
        # Wait for rollback deployment to complete
        echo "⏳ Waiting for rollback deployment to complete..."
        aws deploy wait deployment-successful --deployment-id $ROLLBACK_DEPLOYMENT_ID
        
        echo "✅ Rollback to commit ${{ steps.rollback-strategy.outputs.target-commit }} completed successfully"

    - name: Verify rollback
      run: |
        echo "🔍 Verifying rollback was successful..."
        
        # Wait for services to stabilize
        sleep 60
        
        # Basic verification - the actual health check is done by CodeDeploy validation hooks
        echo "✅ Rollback verification will be handled by CodeDeploy validation hooks"

    - name: Notify Rollbar of rollback
      if: ${{ env.ROLLBAR_ACCESS_TOKEN != '' }}
      env:
        COMMIT_SHA: ${{ steps.rollback-strategy.outputs.target-commit || 'automatic-rollback' }}
      run: |
        cat <<EOF > rollbar-payload.json
        {
          "environment": "production",
          "revision": "$COMMIT_SHA",
          "local_username": "github-actions-rollback",
          "comment": "ROLLBACK: ${{ github.event.inputs.reason }}"
        }
        EOF

        curl -X POST https://api.rollbar.com/api/1/deploy \
          -H "X-Rollbar-Access-Token: $ROLLBAR_ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d @rollbar-payload.json

    - name: Rollback summary
      run: |
        echo "🔄 Production rollback completed!"
        echo ""
        echo "📋 Rollback Details:"
        echo "  Strategy: ${{ steps.rollback-strategy.outputs.strategy }}"
        echo "  Target Commit: ${{ steps.rollback-strategy.outputs.target-commit || 'automatic' }}"
        echo "  Reason: ${{ github.event.inputs.reason }}"
        echo "  Triggered by: ${{ github.actor }}"
        echo "  Environment: production"
        echo ""
        echo "✅ Rollback completed successfully"