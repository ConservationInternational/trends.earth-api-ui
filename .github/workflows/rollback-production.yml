name: Rollback Production Deployment

on:
  workflow_dispatch:
    inputs:
      rollback_to_commit:
        description: 'Specific commit SHA to rollback to (optional, leave blank for automatic rollback)'
        required: false
        default: ''
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

env:
  REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_NAME: trendsearth-ui
  COMPOSE_FILE: docker-compose.prod.yml

jobs:
  rollback-production:
    name: Rollback Production Service
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Validate required secrets
      run: |
        echo "üîç Validating required secrets and environment variables..."
        
        # Check for required secrets
        if [ -z "${{ secrets.DOCKER_REGISTRY }}" ]; then
          echo "‚ùå Error: DOCKER_REGISTRY secret is not set"
          echo "Please configure the DOCKER_REGISTRY secret in repository settings"
          exit 1
        fi
        
        if [ -z "${{ secrets.PROD_HOST }}" ]; then
          echo "‚ùå Error: PROD_HOST secret is not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.PROD_USERNAME }}" ]; then
          echo "‚ùå Error: PROD_USERNAME secret is not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.PROD_SSH_KEY }}" ]; then
          echo "‚ùå Error: PROD_SSH_KEY secret is not set"
          exit 1
        fi
        
        # Validate registry format
        REGISTRY="${{ secrets.DOCKER_REGISTRY }}"
        echo "‚úÖ DOCKER_REGISTRY is set to: $REGISTRY"
        
        # Basic validation of registry format (should contain : for host:port)
        if ! echo "$REGISTRY" | grep -q ":"; then
          echo "‚ùå Error: DOCKER_REGISTRY appears to have invalid format: $REGISTRY"
          echo "Expected format: hostname:port (e.g., registry.example.com:5000)"
          exit 1
        fi
        
        echo "‚úÖ All required secrets are properly configured"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Get runner IP and update security group
      id: security-group
      run: |
        # Get the public IP of the GitHub Actions runner
        RUNNER_IP=$(curl -s https://checkip.amazonaws.com)
        echo "Runner IP: $RUNNER_IP"
        echo "runner-ip=$RUNNER_IP" >> $GITHUB_OUTPUT
        
        # Add SSH access rule for the runner IP
        echo "Adding SSH access for runner IP $RUNNER_IP to security group ${{ secrets.PROD_SECURITY_GROUP_ID }}"
        aws ec2 authorize-security-group-ingress \
          --group-id "${{ secrets.PROD_SECURITY_GROUP_ID }}" \
          --protocol tcp \
          --port 22 \
          --cidr "${RUNNER_IP}/32" || true
        
        echo "Security group rule added successfully"

    - name: Set SSH port variable
      id: ssh-port
      run: |
        # Trim whitespace and newlines from the port
        PORT="${{ secrets.PROD_SSH_PORT || 22 }}"
        PORT=$(echo "$PORT" | tr -d '[:space:]')
        echo "port=$PORT" >> $GITHUB_OUTPUT

    - name: Validate and prepare rollback target
      id: rollback-target
      run: |
        ROLLBACK_TO_COMMIT="${{ github.event.inputs.rollback_to_commit }}"
        
        echo "Rollback to commit: $ROLLBACK_TO_COMMIT"
        
        # Determine the rollback method
        if [ -n "$ROLLBACK_TO_COMMIT" ]; then
          # Validate commit SHA format (should be at least 7 characters, alphanumeric)
          if ! echo "$ROLLBACK_TO_COMMIT" | grep -qE '^[a-fA-F0-9]{7,}$'; then
            echo "‚ùå Error: Invalid commit SHA format: $ROLLBACK_TO_COMMIT"
            echo "Commit SHA should be at least 7 alphanumeric characters"
            exit 1
          fi
          
          echo "‚úÖ Will rollback to commit SHA: $ROLLBACK_TO_COMMIT"
          echo "rollback-method=commit" >> $GITHUB_OUTPUT
          echo "commit-sha=$ROLLBACK_TO_COMMIT" >> $GITHUB_OUTPUT
          
        else
          echo "‚úÖ Using automatic service rollback (no specific target specified)"
          echo "rollback-method=automatic" >> $GITHUB_OUTPUT
        fi

    - name: Perform production rollback
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          echo "üîÑ Starting production rollback..."
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Requested by: ${{ github.actor }}"
          echo "Rollback method: ${{ steps.rollback-target.outputs.rollback-method }}"
          
          if [ "${{ steps.rollback-target.outputs.rollback-method }}" = "commit" ]; then
            echo "Target commit SHA: ${{ steps.rollback-target.outputs.commit-sha }}"
          fi
          
          # Navigate to application directory
          cd ${{ secrets.PROD_APP_PATH || '/opt/trends-earth-ui' }}
          
          # Check current service status
          echo "üìä Current service status before rollback:"
          docker service ls --filter "name=trendsearth-ui-prod"
          
          ROLLBACK_METHOD="${{ steps.rollback-target.outputs.rollback-method }}"
          
          # Handle commit SHA rollback by rebuilding from the specified commit
          if [ "$ROLLBACK_METHOD" = "commit" ]; then
            COMMIT_SHA="${{ steps.rollback-target.outputs.commit-sha }}"
            echo "üîÑ Rolling back to commit SHA: $COMMIT_SHA"
            
            # Fetch latest changes and checkout the specific commit
            echo "üì• Fetching latest changes from repository..."
            git fetch origin
            
            echo "üìã Current branch and commit:"
            echo "  Branch: $(git branch --show-current)"
            echo "  Current commit: $(git rev-parse HEAD)"
            
            # Verify the commit exists
            if git rev-parse --verify "$COMMIT_SHA" >/dev/null 2>&1; then
              echo "‚úÖ Commit $COMMIT_SHA found in repository"
            else
              echo "‚ùå Commit $COMMIT_SHA not found in repository"
              echo "üîç Recent commits:"
              git log --oneline -10
              exit 1
            fi
            
            # Checkout the specific commit
            echo "üîÑ Checking out commit $COMMIT_SHA..."
            git reset --hard "$COMMIT_SHA"
            
            echo "‚úÖ Successfully checked out commit: $(git rev-parse HEAD)"
            echo "üìã Commit details:"
            git log --oneline -1
            
            # Configure insecure registry on server if needed
            echo "üìã Configuring insecure registry on server..."
            sudo mkdir -p /etc/docker
            if [ ! -f /etc/docker/daemon.json ] || ! grep -q "insecure-registries" /etc/docker/daemon.json; then
              echo '{"insecure-registries":["${{ env.REGISTRY }}"]}' | sudo tee /etc/docker/daemon.json > /dev/null
              sudo systemctl restart docker
              sleep 10
            fi
            
            # Build new image from the rolled-back commit
            echo "üî® Building Docker image from commit $COMMIT_SHA..."
            
            REGISTRY="${{ env.REGISTRY }}"
            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            SHORT_SHA="${COMMIT_SHA:0:7}"
            ROLLBACK_TAG="rollback-$SHORT_SHA"
            
            BUILT_TAGS="$REGISTRY/$IMAGE_NAME:$ROLLBACK_TAG
            $REGISTRY/$IMAGE_NAME:latest"
            
            # Build with the rollback tag
            PRIMARY_TAG="$REGISTRY/$IMAGE_NAME:$ROLLBACK_TAG"
            echo "Building with tag: $PRIMARY_TAG"
            
            # Build image with git information
            docker build \
              --build-arg GIT_BRANCH="master" \
              --build-arg GIT_COMMIT="$COMMIT_SHA" \
              --build-arg DEPLOYMENT_ENVIRONMENT="production" \
              -t "$PRIMARY_TAG" .
            
            # Tag with latest as well
            docker tag "$PRIMARY_TAG" "$REGISTRY/$IMAGE_NAME:latest"
            
            # Push the images to local registry
            echo "üöÄ Pushing rollback images to local registry..."
            echo "$BUILT_TAGS" | while IFS= read -r tag; do
              if [ -n "$tag" ]; then
                echo "Pushing: $tag"
                docker push "$tag"
              fi
            done
            
            # Set the image tag for service updates
            FINAL_IMAGE_TAG="$ROLLBACK_TAG"
            
          fi
          
          # Perform rollback for the UI service
          SERVICE_NAME="trendsearth-ui-prod_ui"
          
          echo "üîÑ Rolling back service: $SERVICE_NAME"
          
          # Check if service exists
          if ! docker service ls --format "{{.Name}}" | grep -q "^$SERVICE_NAME$"; then
            echo "‚ùå Service $SERVICE_NAME not found!"
            echo "Available services:"
            docker service ls
            exit 1
          fi
          
          if [ "$ROLLBACK_METHOD" = "commit" ]; then
            # Rollback to specific image (built from commit SHA)
            FULL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$FINAL_IMAGE_TAG"
            echo "üì¶ Rolling back $SERVICE_NAME to image: $FULL_IMAGE"
            
            # Update service to use specific image
            if docker service update --image "$FULL_IMAGE" "$SERVICE_NAME"; then
              echo "‚úÖ Successfully updated $SERVICE_NAME to image $FULL_IMAGE"
            else
              echo "‚ùå Failed to update $SERVICE_NAME to image $FULL_IMAGE"
              exit 1
            fi
          else
            # Use Docker Swarm's built-in rollback functionality
            echo "‚è™ Rolling back $SERVICE_NAME to previous version"
            
            # Check if service has update history for rollback
            UPDATE_STATUS=$(docker service inspect "$SERVICE_NAME" --format='{{.UpdateStatus}}' 2>/dev/null || echo "null")
            
            if [ "$UPDATE_STATUS" = "null" ] || [ -z "$UPDATE_STATUS" ]; then
              echo "‚ö†Ô∏è No update history found for $SERVICE_NAME, cannot perform automatic rollback"
              echo "üîç Current service details:"
              docker service inspect "$SERVICE_NAME" --format='{{.Spec.TaskTemplate.ContainerSpec.Image}}'
              exit 1
            fi
            
            if docker service rollback "$SERVICE_NAME"; then
              echo "‚úÖ Successfully rolled back $SERVICE_NAME"
            else
              echo "‚ùå Failed to rollback $SERVICE_NAME"
              exit 1
            fi
          fi
          
          # Wait for service to stabilize
          echo "‚è≥ Waiting for $SERVICE_NAME to stabilize..."
          sleep 10
          
          # Wait for service to be ready after rollback
          echo "‚è≥ Waiting for service to be ready after rollback..."
          
          max_wait=120
          wait_time=0
          
          while [ $wait_time -lt $max_wait ]; do
            # Check if service has desired replicas running
            service_status=$(docker service ls --filter "name=trendsearth-ui-prod" --format "{{.Name}}\t{{.Replicas}}")
            pending_services=$(echo "$service_status" | grep -v "1/1" | wc -l)
            
            if [ $pending_services -eq 0 ]; then
              echo "‚úÖ Service is running after rollback"
              break
            fi
            
            echo "‚è≥ Waiting for service to be ready... ($wait_time/$max_wait seconds)"
            echo "$service_status"
            sleep 10
            wait_time=$((wait_time + 10))
          done
          
          if [ $wait_time -ge $max_wait ]; then
            echo "‚ö†Ô∏è Service may not be fully ready after $max_wait seconds"
          fi
          
          # Final service status
          echo "üìä Final service status after rollback:"
          docker service ls --filter "name=trendsearth-ui-prod"
          
          echo "üéâ Production rollback completed!"

    - name: Verify rollback health
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          echo "üè• Performing health check after rollback..."
          
          max_attempts=20
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "‚è≥ Health check attempt $attempt/$max_attempts..."
            
            # First check if port is listening
            if ! nc -z 127.0.0.1 8000 2>/dev/null; then
              echo "‚ö†Ô∏è Port 8000 is not listening yet"
            else
              echo "‚úÖ Port 8000 is listening"
            fi
            
            # Perform health check request
            health_response=$(curl -f -s -w "HTTP_CODE:%{http_code}" http://127.0.0.1:8000/api-ui-health 2>&1)
            curl_exit_code=$?
            
            if [ $curl_exit_code -eq 0 ]; then
              echo "‚úÖ Health check passed after rollback"
              echo "Response: $health_response"
              break
            else
              echo "‚è≥ Health check failed with exit code $curl_exit_code"
              echo "Response: $health_response"
            fi
            
            sleep 15
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Health check failed after rollback - $max_attempts attempts"
            echo "üîç Debugging information:"
            echo "  - All running containers:"
            docker ps --filter "name=trendsearth-ui-prod"
            echo "  - UI service details:"
            docker service inspect trendsearth-ui-prod_ui --format="{{json .Spec.TaskTemplate.ContainerSpec}}" || echo "Service not found"
            echo "  - Recent UI service logs:"
            docker service logs --tail 50 trendsearth-ui-prod_ui || echo "No logs available"
            exit 1
          fi
          
          echo "üéâ Rollback health verification completed successfully!"

    - name: Run basic integration tests after rollback
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          echo "üß™ Running basic integration tests after rollback..."
          
          # Test health endpoint
          echo "‚è≥ Testing health endpoint..."
          if curl -f -s http://127.0.0.1:8000/api-ui-health >/dev/null 2>&1; then
            echo "‚úÖ Health endpoint working"
          else
            echo "‚ùå Health endpoint failed"
            exit 1
          fi
          
          # Test basic application loading
          echo "‚è≥ Testing basic application loading..."
          if curl -f -s http://127.0.0.1:8000/ >/dev/null 2>&1; then
            echo "‚úÖ Application loading working"
          else
            echo "‚ùå Application loading failed"
            exit 1
          fi
          
          echo "‚úÖ All basic integration tests passed after rollback"

    - name: Notify Rollbar of rollback
      if: success()
      run: |
        echo "üîî Notifying Rollbar of rollback..."
        
        # Get rollback information
        ENVIRONMENT="production"
        REVISION="${{ github.sha }}"
        LOCAL_USERNAME="${{ github.actor }}"
        
        # Build comment based on rollback method
        ROLLBACK_METHOD="${{ steps.rollback-target.outputs.rollback-method }}"
        if [ "$ROLLBACK_METHOD" = "commit" ]; then
          COMMENT="ROLLBACK TO COMMIT: ${{ steps.rollback-target.outputs.commit-sha }} - Reason: ${{ github.event.inputs.reason }} - Triggered by: ${{ github.actor }}"
        else
          COMMENT="ROLLBACK (automatic): ${{ github.event.inputs.reason }} - Triggered by: ${{ github.actor }}"
        fi
        
        # Send rollback notification to Rollbar (only if token is available)
        if [ -n "${{ secrets.ROLLBAR_ACCESS_TOKEN }}" ]; then
          curl -X POST 'https://api.rollbar.com/api/1/deploy/' \
            -H 'Content-Type: application/json' \
            -d '{
              "access_token": "${{ secrets.ROLLBAR_ACCESS_TOKEN }}",
              "environment": "'"$ENVIRONMENT"'",
              "revision": "'"$REVISION"'",
              "local_username": "'"$LOCAL_USERNAME"'",
              "comment": "'"$COMMENT"'"
            }'
          
          echo "‚úÖ Rollbar rollback notification sent successfully"
        else
          echo "‚ö†Ô∏è ROLLBAR_ACCESS_TOKEN not configured, skipping Rollbar notification"
        fi

    - name: Cleanup security group access
      if: always()
      run: |
        # Remove the SSH access rule for the runner IP
        RUNNER_IP="${{ steps.security-group.outputs.runner-ip }}"
        if [ -n "$RUNNER_IP" ]; then
          echo "Removing SSH access for runner IP $RUNNER_IP from security group ${{ secrets.PROD_SECURITY_GROUP_ID }}"
          aws ec2 revoke-security-group-ingress \
            --group-id "${{ secrets.PROD_SECURITY_GROUP_ID }}" \
            --protocol tcp \
            --port 22 \
            --cidr "${RUNNER_IP}/32" || true
          echo "Security group rule removed successfully"
        else
          echo "No runner IP found to remove from security group"
        fi