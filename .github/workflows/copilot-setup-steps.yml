name: "Trends.Earth API UI Development Environment Setup"

# Manual workflow for setting up complete development environment
# Can be triggered manually or used as reference for local setup
"on":
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to use'
        required: false
        default: '3.12'
        type: choice
        options:
        - '3.11'
        - '3.12'
      install_browsers:
        description: 'Install Playwright browsers'
        required: false
        default: true
        type: boolean

jobs:
  setup-environment:
    name: "Complete Development Environment Setup"
    runs-on: ubuntu-latest
    
    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v4

    - name: "Set up Python environment"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version || '3.12' }}
        cache: "pip"

    - name: "Install Poetry"
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: "Cache Poetry dependencies"
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: "Install Python dependencies"
      run: |
        poetry install --with dev
        echo "‚úÖ All dependencies including dev dependencies (pytest, ruff, playwright, selenium) installed"

    - name: "Install Playwright browsers with dependencies"
      if: ${{ inputs.install_browsers != false }}
      run: |
        # Install chromium browser with system dependencies for e2e testing
        # Note: This may fail in restricted CI environments due to download limitations
        if poetry run playwright install chromium --with-deps; then
          echo "‚úÖ Playwright browsers installed successfully"
        else
          echo "‚ö†Ô∏è  Playwright browser installation failed (common in CI environments)"
          echo "   Browser tests will be skipped but other functionality remains available"
        fi
        
        # Verify playwright installation (command should work even without browsers)
        poetry run playwright --version
      timeout-minutes: 15

    - name: "Verify core dependencies"
      run: |
        # Verify Python and Poetry setup
        poetry --version
        poetry run python --version
        
        # Verify core application can be imported
        poetry run python -c "import trendsearth_ui; print('‚úÖ Core application imports successfully')"
        
        # Verify key dependencies
        poetry run python -c "import dash, pandas, requests; print('‚úÖ Core runtime dependencies available')"

    - name: "Verify test dependencies"
      run: |
        # Verify pytest and testing tools
        poetry run python -c "import pytest; print('‚úÖ Pytest available')"
        poetry run python -c "import pytest_mock; print('‚úÖ Pytest-mock available')"
        poetry run python -c "import pytest_cov; print('‚úÖ Pytest-cov available')"
        poetry run python -c "import selenium; print('‚úÖ Selenium available')"
        poetry run python -c "import playwright; print('‚úÖ Playwright available')"
        
        # Test pytest configuration
        poetry run pytest --version

    - name: "Verify code quality tools"
      run: |
        # Verify Ruff installation and basic functionality
        poetry run ruff --version
        
        # Test ruff check command
        echo 'print("hello")' > /tmp/test_ruff.py
        poetry run ruff check /tmp/test_ruff.py
        echo "‚úÖ Ruff check command working"
        
        # Test ruff format command
        poetry run ruff format /tmp/test_ruff.py
        echo "‚úÖ Ruff format command working"
        
        # Clean up
        rm /tmp/test_ruff.py
        
        echo "‚úÖ Code quality tools (Ruff) are working correctly"

    - name: "Run quick validation tests"
      run: |
        # Run a subset of unit tests to verify the environment works
        poetry run python -m pytest tests/unit/test_config.py -v --tb=short
        
        echo "‚úÖ Basic test environment is working"

    - name: "Verify Playwright browser functionality"
      if: ${{ inputs.install_browsers != false }}
      run: |
        # Test that Playwright can launch browsers (if available)
        poetry run python -c "
        from playwright.sync_api import sync_playwright
        import sys
        try:
            with sync_playwright() as p:
                browser = p.chromium.launch(headless=True)
                page = browser.new_page()
                page.goto('data:text/html,<h1>Test</h1>')
                browser.close()
                print('‚úÖ Playwright browser functionality verified')
        except Exception as e:
            print(f'‚ö†Ô∏è  Playwright browser test failed: {e}')
            print('   This is expected if browsers failed to install (e.g., in CI environments)')
            print('   Other functionality remains available')
            # Don't exit with error - this is optional
        "

    - name: "Display environment summary"
      run: |
        echo "üéâ Environment setup complete!"
        echo ""
        echo "üìã Environment Summary:"
        echo "Python: $(poetry run python --version)"
        echo "Poetry: $(poetry --version)"
        echo "Pytest: $(poetry run pytest --version)"
        echo "Ruff: $(poetry run ruff --version)"
        echo "Playwright: $(poetry run playwright --version)"
        echo ""
        echo "üöÄ Ready for development! Available commands:"
        echo "  ‚Ä¢ Run tests: poetry run python -m pytest tests/ -v"
        echo "  ‚Ä¢ Run unit tests: poetry run python -m pytest tests/unit/ -v"
        echo "  ‚Ä¢ Run playwright tests: poetry run python -m pytest tests/playwright/ -v"
        echo "  ‚Ä¢ Lint code: poetry run ruff check trendsearth_ui/ tests/"
        echo "  ‚Ä¢ Format code: poetry run ruff format trendsearth_ui/ tests/"
        echo "  ‚Ä¢ Run app: poetry run python -m trendsearth_ui.app"
        echo ""
        echo "üìö Documentation: See README.md for detailed usage instructions"
