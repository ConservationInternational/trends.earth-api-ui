name: Deploy to Staging

on:
  push:
    branches: [staging, develop]
  pull_request:
    branches: [staging]
    types: [closed]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_NAME: trendsearth-ui
  COMPOSE_FILE: docker-compose.staging.yml

jobs:
  build-and-deploy:
    name: Build and Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Get runner IP and update security group
      id: security-group
      run: |
        # Get the public IP of the GitHub Actions runner
        RUNNER_IP=$(curl -s https://checkip.amazonaws.com)
        echo "Runner IP: $RUNNER_IP"
        echo "runner-ip=$RUNNER_IP" >> $GITHUB_OUTPUT
        
        # Add SSH access rule for the runner IP
        echo "Adding SSH access for runner IP $RUNNER_IP to security group ${{ secrets.STAGING_SECURITY_GROUP_ID }}"
        aws ec2 authorize-security-group-ingress \
          --group-id "${{ secrets.STAGING_SECURITY_GROUP_ID }}" \
          --protocol tcp \
          --port 22 \
          --cidr "${RUNNER_IP}/32" || true
        
        echo "Security group rule added successfully"

    - name: Set SSH port variable
      id: ssh-port
      run: |
        # Trim whitespace and newlines from the port
        PORT="${{ secrets.STAGING_SSH_PORT || 22 }}"
        PORT=$(echo "$PORT" | tr -d '[:space:]')
        echo "port=$PORT" >> $GITHUB_OUTPUT

    - name: Check for concurrent deployments
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          LOCK_FILE="/tmp/staging-ui-deployment.lock"
          
          # Check if a deployment is already in progress
          if [ -f "$LOCK_FILE" ]; then
            LOCK_PID=$(cat "$LOCK_FILE" 2>/dev/null || echo "")
            if [ -n "$LOCK_PID" ] && kill -0 "$LOCK_PID" 2>/dev/null; then
              echo "❌ Another deployment is already in progress (PID: $LOCK_PID)"
              echo "Please wait for the current deployment to complete before starting a new one"
              exit 1
            else
              echo "🧹 Removing stale lock file"
              rm -f "$LOCK_FILE"
            fi
          fi
          
          # Create lock file with current process ID
          echo $$ > "$LOCK_FILE"
          echo "🔒 Deployment lock acquired"

    - name: Build and push image on staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          echo "🚀 Building Docker image on staging server..."
          
          # Navigate to application directory
          cd ${{ secrets.STAGING_APP_PATH || '/opt/trends-earth-ui-staging' }}
          
          # Pull latest changes and checkout the correct branch
          git fetch origin
          
          # Determine which branch to deploy and checkout
          if [ "${{ github.ref_name }}" = "staging" ]; then
            echo "🔄 Checking out staging branch..."
            git checkout staging
            git reset --hard origin/staging
          else
            echo "🔄 Checking out develop branch..."
            git checkout develop
            git reset --hard origin/develop
          fi
          
          echo "✅ Currently on branch: $(git branch --show-current)"
          
          # Configure insecure registry on server if needed
          echo "📋 Configuring insecure registry on server..."
          sudo mkdir -p /etc/docker
          if [ ! -f /etc/docker/daemon.json ] || ! grep -q "insecure-registries" /etc/docker/daemon.json; then
            echo '{"insecure-registries":["${{ env.REGISTRY }}"]}' | sudo tee /etc/docker/daemon.json > /dev/null
            sudo systemctl restart docker
            sleep 10
          fi
          
          # Configure Docker client authentication
          mkdir -p $HOME/.docker
          
          # Create simplified Docker config without auth for staging
          echo "🔐 Creating Docker config for staging..."
          cat > $HOME/.docker/config.json <<-DOCKERCONFIG
          {
            "insecure-registries": ["${{ env.REGISTRY }}"]
          }
          DOCKERCONFIG
          echo "✅ Docker config created successfully"
          
          # Build the image with the appropriate tags
          echo "🔨 Building Docker image..."
          
          # Create staging-specific tags
          REGISTRY="${{ env.REGISTRY }}"
          IMAGE_NAME="${{ env.IMAGE_NAME }}"
          BRANCH_NAME="${{ github.ref_name }}"
          SHORT_SHA="${{ github.sha }}"
          SHORT_SHA="${SHORT_SHA:0:7}"
          
          BUILT_TAGS="$REGISTRY/$IMAGE_NAME:$BRANCH_NAME
          $REGISTRY/$IMAGE_NAME:$BRANCH_NAME-$SHORT_SHA
          $REGISTRY/$IMAGE_NAME:staging"
          
          # Build with the first tag (primary tag)
          PRIMARY_TAG="$REGISTRY/$IMAGE_NAME:$BRANCH_NAME"
          echo "Building with primary tag: $PRIMARY_TAG"
          
          # Build image with git information
          docker build \
            --build-arg GIT_BRANCH="${{ github.ref_name }}" \
            --build-arg GIT_COMMIT="${{ github.sha }}" \
            --build-arg DEPLOYMENT_ENVIRONMENT="staging" \
            -t "$PRIMARY_TAG" .
          
          # Tag with additional tags
          echo "$BUILT_TAGS" | while IFS= read -r tag; do
            if [ -n "$tag" ] && [ "$tag" != "$PRIMARY_TAG" ]; then
              echo "Tagging with: $tag"
              docker tag "$PRIMARY_TAG" "$tag"
            fi
          done
          
          # Push all tags to the local registry
          echo "🚀 Pushing images to local registry..."
          echo "$BUILT_TAGS" | while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "Pushing: $tag"
              docker push "$tag"
            fi
          done
          
          echo "✅ Image build and push completed!"

    - name: Deploy to EC2 Staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          echo "🚀 Starting staging deployment..."
          
          # Navigate to application directory
          cd ${{ secrets.STAGING_APP_PATH || '/opt/trends-earth-ui-staging' }}
          
          export DOCKER_REGISTRY="${{ secrets.DOCKER_REGISTRY }}"

          # Set version information for health checks
          export GIT_COMMIT_SHA="${{ github.sha }}"
          export GIT_BRANCH="${{ github.ref_name }}"
          export DEPLOYMENT_ENVIRONMENT="staging"
          export ROLLBAR_ACCESS_TOKEN="${{ secrets.ROLLBAR_ACCESS_TOKEN }}"
          
          # Verify environment variables are set correctly
          echo "📋 Environment variables:"
          echo "  DOCKER_REGISTRY: $DOCKER_REGISTRY"
          echo "  GIT_COMMIT_SHA: $GIT_COMMIT_SHA"
          echo "  GIT_BRANCH: $GIT_BRANCH"
          
          # Ensure we're using the latest compose file
          echo "📋 Verifying compose file..."
          if [ ! -f "${{ env.COMPOSE_FILE }}" ]; then
            echo "❌ Compose file not found: ${{ env.COMPOSE_FILE }}"
            exit 1
          fi
          
          # Validate compose file syntax before deploying
          echo "🧪 Validating compose file syntax..."
          if docker compose -f ${{ env.COMPOSE_FILE }} config >/dev/null 2>&1; then
            echo "✅ Compose file is valid"
          else
            echo "❌ Compose validation failed; showing first lines of error:"
            docker compose -f ${{ env.COMPOSE_FILE }} config 2>&1 | head -n 50
            exit 1
          fi
          
          # Deploy services using Docker Swarm
          echo "📦 Deploying services..."
          
          # Check if there's an existing stack to perform rolling update
          if docker stack ls --format "{{.Name}}" | grep -q "^trendsearth-ui-staging$"; then
            echo "🔄 Performing rolling update deployment..."
            attempts=0
            until docker stack deploy -c ${{ env.COMPOSE_FILE }} --with-registry-auth trendsearth-ui-staging; do
              attempts=$((attempts+1))
              if [ "$attempts" -ge 3 ]; then
                echo "❌ Stack deploy failed after $attempts attempts"
                exit 1
              fi
              echo "⏳ Stack deploy failed, retrying in 5s (attempt $attempts/3)..."
              sleep 5
            done
          else
            echo "🚀 Deploying fresh stack..."
            attempts=0
            until docker stack deploy -c ${{ env.COMPOSE_FILE }} --with-registry-auth trendsearth-ui-staging; do
              attempts=$((attempts+1))
              if [ "$attempts" -ge 3 ]; then
                echo "❌ Stack deploy failed after $attempts attempts"
                exit 1
              fi
              echo "⏳ Stack deploy failed, retrying in 5s (attempt $attempts/3)..."
              sleep 5
            done
          fi
          
          # Wait for rolling update to complete
          echo "⏳ Waiting for rolling update to complete..."
          
          # Monitor services for successful deployment
          echo "📊 Monitoring service deployment..."
          max_wait=180
          wait_time=0
          
          while [ $wait_time -lt $max_wait ]; do
            # Get the current state of services
            services_status=$(docker service ls --filter "name=trendsearth-ui-staging" --format "{{.Name}}\t{{.Replicas}}")
            
            # Check if all services are converged (not updating)
            updating_services=$(docker service ls --filter "name=trendsearth-ui-staging" --format "{{.Name}}\t{{.UpdateStatus}}" | grep -v "completed\|paused\|" | wc -l)
            
            if [ "$updating_services" -eq 0 ]; then
              # Check if all desired replicas are running
              pending_services=$(echo "$services_status" | grep -v "1/1" | wc -l)
              
              if [ "$pending_services" -eq 0 ]; then
                echo "✅ All services successfully deployed and running"
                break
              else
                echo "⏳ Waiting for services to reach desired state..."
              fi
            else
              echo "⏳ Rolling update in progress for $updating_services service(s)..."
            fi
            
            echo "Current service status:"
            echo "$services_status"
            
            sleep 10
            wait_time=$((wait_time + 10))
          done
          
          if [ $wait_time -ge $max_wait ]; then
            echo "⚠️ Rolling update did not complete within $max_wait seconds"
            echo "🔍 Current service status:"
            docker service ls --filter "name=trendsearth-ui-staging" --format "table {{.Name}}\t{{.Replicas}}\t{{.UpdateStatus}}"
            
            echo "🔍 Checking for failed services..."
            failed_services=$(docker service ls --filter "name=trendsearth-ui-staging" --format "{{.Name}}\t{{.UpdateStatus}}" | grep "paused\|rollback_paused" || true)
            
            if [ -n "$failed_services" ]; then
              echo "❌ Some services failed to update:"
              echo "$failed_services"
              echo "🔄 Automatic rollback will be handled by health check step"
            else
              echo "⚠️ Services may still be updating - proceeding to health check"
            fi
          fi
          
          # Check service status
          echo "📊 Final service status:"
          docker service ls | grep trendsearth-ui-staging
          
          # Health check
          echo "🏥 Performing health check..."
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "⏳ Health check attempt $attempt/$max_attempts..."
            
            # First check if port is listening
            if ! nc -z 127.0.0.1 8001 2>/dev/null; then
              echo "⚠️ Port 8001 is not listening yet"
            else
              echo "✅ Port 8001 is listening"
            fi
            
            # Perform health check request (staging runs on port 8001)
            health_response=$(curl -f -s -w "HTTP_CODE:%{http_code}" http://127.0.0.1:8001/api-ui-health 2>&1)
            curl_exit_code=$?
            
            if [ $curl_exit_code -eq 0 ]; then
              echo "✅ Health check passed"
              echo "Response: $health_response"
              break
            else
              echo "⏳ Health check failed with exit code $curl_exit_code"
              echo "Response: $health_response"
            fi
            
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Health check failed after $max_attempts attempts"
            echo "🔍 Final debugging information:"
            echo "  - All running containers:"
            docker ps --filter "name=trendsearth-ui-staging"
            echo "  - UI service details:"
            docker service inspect trendsearth-ui-staging_ui --format="{{json .Spec.TaskTemplate.ContainerSpec}}" || echo "Service not found"
            echo "  - Recent UI service logs:"
            docker service logs --tail 50 trendsearth-ui-staging_ui || echo "No logs available"
            exit 1
          fi
          
          echo "🎉 Staging deployment completed successfully!"

    - name: Run integration tests
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          echo "🧪 Running basic integration tests for staging..."
          
          # Test health endpoint
          echo "⏳ Testing health endpoint..."
          if curl -f -s http://127.0.0.1:8001/api-ui-health >/dev/null 2>&1; then
            echo "✅ Health endpoint working"
          else
            echo "❌ Health endpoint failed"
            exit 1
          fi
          
          # Test basic application loading
          echo "⏳ Testing basic application loading..."
          if curl -f -s http://127.0.0.1:8001/ >/dev/null 2>&1; then
            echo "✅ Application loading working"
          else
            echo "❌ Application loading failed"
            exit 1
          fi
          
          echo "✅ All basic integration tests passed"

    - name: Notify Rollbar of deployment
      if: success()
      run: |
        echo "🔔 Notifying Rollbar of successful deployment..."
        
        # Get deployment information
        ENVIRONMENT="staging"
        REVISION="${{ github.sha }}"
        LOCAL_USERNAME="${{ github.actor }}"
        COMMENT="Deployed to staging via GitHub Actions - Branch: ${{ github.ref_name }}, Commit: ${REVISION:0:7}"
        
        # Send deployment notification to Rollbar (only if token is available)
        if [ -n "${{ secrets.ROLLBAR_ACCESS_TOKEN }}" ]; then
          curl -X POST 'https://api.rollbar.com/api/1/deploy/' \
            -H 'Content-Type: application/json' \
            -d '{
              "access_token": "${{ secrets.ROLLBAR_ACCESS_TOKEN }}",
              "environment": "'"$ENVIRONMENT"'",
              "revision": "'"$REVISION"'",
              "local_username": "'"$LOCAL_USERNAME"'",
              "comment": "'"$COMMENT"'"
            }'
          
          echo "✅ Rollbar deployment notification sent successfully"
        else
          echo "⚠️ ROLLBAR_ACCESS_TOKEN not configured, skipping Rollbar notification"
        fi
        
    - name: Cleanup deployment lock
      if: always()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          # Remove deployment lock file
          LOCK_FILE="/tmp/staging-ui-deployment.lock"
          if [ -f "$LOCK_FILE" ]; then
            rm -f "$LOCK_FILE"
            echo "🔓 Deployment lock released"
          fi

    - name: Cleanup security group access
      if: always()
      run: |
        # Remove the SSH access rule for the runner IP
        RUNNER_IP="${{ steps.security-group.outputs.runner-ip }}"
        if [ -n "$RUNNER_IP" ]; then
          echo "Removing SSH access for runner IP $RUNNER_IP from security group ${{ secrets.STAGING_SECURITY_GROUP_ID }}"
          aws ec2 revoke-security-group-ingress \
            --group-id "${{ secrets.STAGING_SECURITY_GROUP_ID }}" \
            --protocol tcp \
            --port 22 \
            --cidr "${RUNNER_IP}/32" || true
          echo "Security group rule removed successfully"
        else
          echo "No runner IP found to remove from security group"
        fi